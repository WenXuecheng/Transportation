{"ast":null,"code":"import { ValidStringPattern } from \"../../../public/config\";\nexport default {\n  name: \"Password\",\n  data() {\n    var validateOthers = (rule, value, callback) => {\n      if (this.isValidString(value) == false) {\n        // this.$refs.ruleForm.validateField('checkPass');\n        callback(new Error('Используйте только цифры, буквы и @.*/-+'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      form: {},\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      rules: {\n        password: [{\n          required: true,\n          message: this.$t('passwd'),\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 50,\n          message: 'Длина от 5 до 50 символов',\n          trigger: 'blur'\n        }, {\n          validator: validateOthers,\n          trigger: 'blur'\n        }],\n        newPassword: [{\n          required: true,\n          message: this.$t('enteranewpassword'),\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 50,\n          message: this.$t('Nolessthandigitsinlength'),\n          trigger: 'blur'\n        }, {\n          validator: validateOthers,\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: this.$t('enterYourPassword'),\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 50,\n          message: this.$t('Nolessthandigitsinlength'),\n          trigger: 'blur'\n        }, {\n          validator: validateOthers,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    this.form.username = this.user.username;\n  },\n  methods: {\n    save() {\n      this.$refs.pass.validate(valid => {\n        if (valid) {\n          if (this.form.newPassword !== this.form.confirmPassword) {\n            this.$message.error(this.$t('notSame'));\n            return false;\n          }\n          this.request.post(\"/user/password\", this.form).then(res => {\n            if (res.code === '200') {\n              this.$message.success(this.$t('修改成功'));\n              this.$store.commit(\"logout\");\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        }\n      });\n    },\n    isValidString(str) {\n      try {\n        //英文字母数字俄语字母/*-+.@_\n        const pattern = /^[0-9a-zA-Z\\u4e00-\\u9fa5\\u0400-\\u04FF*@.\\/\\-+_]+$/;\n        return ValidStringPattern.test(str);\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["ValidStringPattern","name","data","validateOthers","rule","value","callback","isValidString","Error","form","user","localStorage","getItem","JSON","parse","rules","password","required","message","$t","trigger","min","max","validator","newPassword","confirmPassword","created","username","methods","save","$refs","pass","validate","valid","$message","error","request","post","then","res","code","success","$store","commit","msg","str","pattern","test","e"],"sources":["src/views/front/Password.vue"],"sourcesContent":["<template>\r\n    <div style=\"position: relative; right: -15%;top: 10%; width: 60%\">\r\n        <el-card style=\"width: 500px;position: relative;top: 20%; right: -25%\">\r\n            <el-form label-width=\"120px\" size=\"small\" :model=\"form\" :rules=\"rules\" ref=\"pass\">\r\n\r\n                <el-form-item :label=\"$t('originalPassword')\" prop=\"password\">\r\n                    <el-input v-model=\"form.password\" autocomplete=\"off\" show-password></el-input>\r\n                </el-form-item>\r\n                <el-form-item :label=\"$t('newPassword')\" prop=\"newPassword\">\r\n                    <el-input v-model=\"form.newPassword\" autocomplete=\"off\" show-password></el-input>\r\n                </el-form-item>\r\n                <el-form-item :label=\"$t('confirmPassword')\" prop=\"confirmPassword\">\r\n                    <el-input v-model=\"form.confirmPassword\" autocomplete=\"off\" show-password></el-input>\r\n                </el-form-item>\r\n                <el-form-item>\r\n                    <el-button v-no-more-click type=\"primary\" @click=\"save\">{{ $t('confirm') }}</el-button>\r\n                </el-form-item>\r\n            </el-form>\r\n        </el-card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {ValidStringPattern} from \"../../../public/config\";\r\nexport default {\r\n    name: \"Password\",\r\n    data() {\r\n        var validateOthers = (rule, value, callback) => {\r\n            if(this.isValidString(value) == false){\r\n                // this.$refs.ruleForm.validateField('checkPass');\r\n                callback(new Error('Используйте только цифры, буквы и @.*/-+'));\r\n            } else {\r\n                callback();\r\n            }\r\n        };\r\n        return {\r\n            form: {},\r\n            user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\r\n            rules: {\r\n                password: [\r\n                    { required: true, message: this.$t('passwd'), trigger: 'blur' },\r\n                    { min: 5, max: 50, message: 'Длина от 5 до 50 символов', trigger: 'blur' },\r\n                    { validator: validateOthers,  trigger: 'blur'}\r\n                ],\r\n                newPassword: [\r\n                    { required: true, message: this.$t('enteranewpassword'), trigger: 'blur' },\r\n                    { min: 5, max: 50, message: this.$t('Nolessthandigitsinlength'), trigger: 'blur' },\r\n                    { validator: validateOthers,  trigger: 'blur'}\r\n                ],\r\n                confirmPassword: [\r\n                    { required: true, message: this.$t('enterYourPassword'), trigger: 'blur' },\r\n                    { min: 5, max: 50, message: this.$t('Nolessthandigitsinlength'), trigger: 'blur' },\r\n                    { validator: validateOthers,  trigger: 'blur'}\r\n                ],\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        this.form.username = this.user.username\r\n    },\r\n    methods: {\r\n        save() {\r\n            this.$refs.pass.validate((valid) => {\r\n                if (valid) {\r\n                    if (this.form.newPassword !== this.form.confirmPassword) {\r\n                        this.$message.error(this.$t('notSame'))\r\n                        return false\r\n                    }\r\n                    this.request.post(\"/user/password\", this.form).then(res => {\r\n                        if (res.code === '200') {\r\n                            this.$message.success(this.$t('修改成功'))\r\n                            this.$store.commit(\"logout\")\r\n                        } else {\r\n                            this.$message.error(res.msg)\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        },\r\n        isValidString(str) {\r\n            try {\r\n                //英文字母数字俄语字母/*-+.@_\r\n                const pattern = /^[0-9a-zA-Z\\u4e00-\\u9fa5\\u0400-\\u04FF*@.\\/\\-+_]+$/;\r\n                return ValidStringPattern.test(str);\r\n            } catch (e){\r\n                return null\r\n            }\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.avatar-uploader {\r\n    text-align: center;\r\n    padding-bottom: 10px;\r\n}\r\n.avatar-uploader .el-upload {\r\n    border: 1px dashed #d9d9d9;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n.avatar-uploader .el-upload:hover {\r\n    border-color: #409EFF;\r\n}\r\n.avatar-uploader-icon {\r\n    font-size: 28px;\r\n    color: #8c939d;\r\n    width: 138px;\r\n    height: 138px;\r\n    line-height: 138px;\r\n    text-align: center;\r\n}\r\n.avatar {\r\n    width: 138px;\r\n    height: 138px;\r\n    display: block;\r\n}\r\n</style>\r\n"],"mappings":"AAuBA,SAAAA,kBAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA,IAAAC,cAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,SAAAC,aAAA,CAAAF,KAAA;QACA;QACAC,QAAA,KAAAE,KAAA;MACA;QACAF,QAAA;MACA;IACA;IACA;MACAG,IAAA;MACAC,IAAA,EAAAC,YAAA,CAAAC,OAAA,WAAAC,IAAA,CAAAC,KAAA,CAAAH,YAAA,CAAAC,OAAA;MACAG,KAAA;QACAC,QAAA,GACA;UAAAC,QAAA;UAAAC,OAAA,OAAAC,EAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAJ,OAAA;UAAAE,OAAA;QAAA,GACA;UAAAG,SAAA,EAAApB,cAAA;UAAAiB,OAAA;QAAA,EACA;QACAI,WAAA,GACA;UAAAP,QAAA;UAAAC,OAAA,OAAAC,EAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAJ,OAAA,OAAAC,EAAA;UAAAC,OAAA;QAAA,GACA;UAAAG,SAAA,EAAApB,cAAA;UAAAiB,OAAA;QAAA,EACA;QACAK,eAAA,GACA;UAAAR,QAAA;UAAAC,OAAA,OAAAC,EAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAJ,OAAA,OAAAC,EAAA;UAAAC,OAAA;QAAA,GACA;UAAAG,SAAA,EAAApB,cAAA;UAAAiB,OAAA;QAAA;MAEA;IACA;EACA;EACAM,QAAA;IACA,KAAAjB,IAAA,CAAAkB,QAAA,QAAAjB,IAAA,CAAAiB,QAAA;EACA;EACAC,OAAA;IACAC,KAAA;MACA,KAAAC,KAAA,CAAAC,IAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,SAAAxB,IAAA,CAAAe,WAAA,UAAAf,IAAA,CAAAgB,eAAA;YACA,KAAAS,QAAA,CAAAC,KAAA,MAAAhB,EAAA;YACA;UACA;UACA,KAAAiB,OAAA,CAAAC,IAAA,wBAAA5B,IAAA,EAAA6B,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACA,KAAAN,QAAA,CAAAO,OAAA,MAAAtB,EAAA;cACA,KAAAuB,MAAA,CAAAC,MAAA;YACA;cACA,KAAAT,QAAA,CAAAC,KAAA,CAAAI,GAAA,CAAAK,GAAA;YACA;UACA;QACA;MACA;IACA;IACArC,cAAAsC,GAAA;MACA;QACA;QACA,MAAAC,OAAA;QACA,OAAA9C,kBAAA,CAAA+C,IAAA,CAAAF,GAAA;MACA,SAAAG,CAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}