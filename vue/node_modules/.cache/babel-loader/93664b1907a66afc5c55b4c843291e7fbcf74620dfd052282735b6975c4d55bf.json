{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { serverIp, serverPort, http } from \"../../public/config\";\nimport { Message } from \"element-ui\";\nimport store from \"../store/store\";\nimport router, { resetRouter } from \"@/router\";\nconst request = axios.create({\n  baseURL: `${http}://${serverIp}:${serverPort}`,\n  timeout: 30000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null;\n  if (user) {\n    config.headers['token'] = user.token; // 设置请求头\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  // 当权限验证不通过的时候给出提示\n  if (res.code === '401') {\n    if (res.msg === \"无token，请重新登录\") {\n      try {\n        // 清空缓存\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"menus\");\n        router.push(\"/login\");\n        // 重置路由\n        resetRouter();\n      } catch (error) {\n        Message({\n          message: error,\n          type: 'error'\n        });\n      }\n      Message({\n        message: \"Нет токена, пожалуйста, войдите снова\",\n        type: 'error'\n      });\n    }\n    if (res.msg === \"token验证失败，请重新登录\") {\n      try {\n        // 清空缓存\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"menus\");\n        router.push(\"/login\");\n        // 重置路由\n        resetRouter();\n      } catch (error) {\n        Message({\n          message: error,\n          type: 'error'\n        });\n      }\n      Message({\n        message: \"Верификация не прошла, пожалуйста, войдите снова\",\n        type: 'error'\n      });\n    }\n    if (res.msg === \"用户不存在，请重新登录\") {\n      try {\n        // 清空缓存\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"menus\");\n        router.push(\"/login\");\n        // 重置路由\n        resetRouter();\n      } catch (error) {\n        Message({\n          message: error,\n          type: 'error'\n        });\n      }\n      Message({\n        message: \"Пользователь не существует, пожалуйста, войдите снова\",\n        type: 'error'\n      });\n    }\n  }\n  return res;\n}, error => {\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","serverIp","serverPort","http","Message","store","router","resetRouter","request","create","baseURL","timeout","interceptors","use","config","headers","user","localStorage","getItem","JSON","parse","token","error","Promise","reject","response","res","data","responseType","code","msg","removeItem","push","message","type"],"sources":["D:/pro/Transportation/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport {serverIp,serverPort,http} from \"../../public/config\";\r\nimport {Message} from \"element-ui\";\r\nimport store from \"../store/store\";\r\nimport router, {resetRouter} from \"@/router\";\r\nconst request = axios.create({\r\n    baseURL: `${http}://${serverIp}:${serverPort}`,\r\n    timeout: 30000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null\r\n    if (user) {\r\n        config.headers['token'] =  user.token;  // 设置请求头\r\n    }\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        // 当权限验证不通过的时候给出提示\r\n        if (res.code === '401') {\r\n            if (res.msg === \"无token，请重新登录\"){\r\n                try {// 清空缓存\r\n                    localStorage.removeItem(\"user\")\r\n                    localStorage.removeItem(\"menus\")\r\n                    router.push(\"/login\")\r\n                    // 重置路由\r\n                    resetRouter()\r\n                } catch (error){\r\n                    Message({\r\n                        message: error,\r\n                        type: 'error'\r\n                    })\r\n                }\r\n                Message({\r\n                    message: \"Нет токена, пожалуйста, войдите снова\",\r\n                    type: 'error'\r\n                })\r\n            }\r\n            if (res.msg === \"token验证失败，请重新登录\"){\r\n                try {// 清空缓存\r\n                    localStorage.removeItem(\"user\")\r\n                    localStorage.removeItem(\"menus\")\r\n                    router.push(\"/login\")\r\n                    // 重置路由\r\n                    resetRouter()\r\n                } catch (error){\r\n                    Message({\r\n                        message: error,\r\n                        type: 'error'\r\n                    })\r\n                }\r\n                Message({\r\n                    message: \"Верификация не прошла, пожалуйста, войдите снова\",\r\n                    type: 'error'\r\n                })\r\n            }\r\n            if (res.msg === \"用户不存在，请重新登录\"){\r\n                try {// 清空缓存\r\n                    localStorage.removeItem(\"user\")\r\n                    localStorage.removeItem(\"menus\")\r\n                    router.push(\"/login\")\r\n                    // 重置路由\r\n                    resetRouter()\r\n                } catch (error){\r\n                    Message({\r\n                        message: error,\r\n                        type: 'error'\r\n                    })\r\n                }\r\n                Message({\r\n                    message: \"Пользователь не существует, пожалуйста, войдите снова\",\r\n                    type: 'error'\r\n                })\r\n            }\r\n\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}