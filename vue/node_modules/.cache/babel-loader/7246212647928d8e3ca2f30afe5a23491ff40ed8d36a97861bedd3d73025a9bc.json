{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from \"../store/store\";\nVue.use(VueRouter);\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: () => import('../views/Login.vue')\n}, {\n  path: '/register',\n  name: 'Register',\n  component: () => import('../views/Register.vue')\n}, {\n  path: '/404',\n  name: '404',\n  component: () => import('../views/404.vue')\n}, {\n  path: '/front',\n  name: 'Front',\n  component: () => import('../views/front/Front'),\n  children: [{\n    path: 'home',\n    name: 'FrontHome',\n    component: () => import('../views/front/Home.vue')\n  }, {\n    path: 'createorder',\n    name: 'Createorder',\n    component: () => import('../views/front/Createorder.vue')\n  }, {\n    path: 'Searchorder',\n    name: 'Searchorder',\n    component: () => import('../views/front/Searchorder.vue')\n  }, {\n    path: 'person',\n    name: 'FrontPerson',\n    component: () => import('../views/front/Person')\n  }, {\n    path: 'password',\n    name: 'FrontPassword',\n    component: () => import('../views/front/Password')\n  }]\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\n\n// // 提供一个重置路由的方法\n// export const resetRouter = () => {\n//   router.matcher = new VueRouter({\n//     mode: 'history',\n//     base: process.env.BASE_URL,\n//     routes\n//   })\n// }\n//\n// // 注意：刷新页面会导致页面路由重置\n// export const setRoutes = () => {\n//   const storeMenus = localStorage.getItem(\"menus\");\n//   if (storeMenus) {\n//\n//     // 获取当前的路由对象名称数组\n//     const currentRouteNames = router.getRoutes().map(v => v.name)\n//     if (!currentRouteNames.includes('Manage')) {\n//       // 拼装动态路由\n//       const manageRoute = { path: '/', name: 'Manage', component: () => import('../views/Manage.vue'), redirect: \"/Dashbord\", children: [\n//           { path: 'person', name: '个人信息', component: () => import('../views/Person.vue')},\n//           { path: 'password', name: '修改密码', component: () => import('../views/Password.vue')}\n//         ] }\n//       const menus = JSON.parse(storeMenus)\n//       menus.forEach(item => {\n//         if (item.path) {  // 当且仅当path不为空的时候才去设置路由\n//           let itemMenu = { path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue')}\n//           manageRoute.children.push(itemMenu)\n//         } else if(item.children.length) {\n//           item.children.forEach(item => {\n//             if (item.path) {\n//               let itemMenu = { path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue')}\n//               manageRoute.children.push(itemMenu)\n//             }\n//           })\n//         }\n//       })\n//       // 动态添加到现在的路由对象中去\n//       console.log(manageRoute)\n//       router.addRoute(manageRoute)\n//     }\n//   }\n// }\n//\n// // 重置我就再set一次路由\n// setRoutes()\n//\n//\n// router.beforeEach((to, from, next) => {\n//   localStorage.setItem(\"currentPathName\", to.name)  // 设置当前的路由名称\n//   store.commit(\"setPath\")\n//\n//   // 未找到路由的情况\n//   if (!to.matched.length) {\n//     const storeMenus = localStorage.getItem(\"menus\")\n//     if (storeMenus) {\n//       next(\"/404\")\n//     } else {\n//       // 跳回登录页面\n//       next(\"/login\")\n//     }\n//   }\n//   // 其他的情况都放行\n//   next()\n//\n// })\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","store","use","routes","path","name","component","children","router","mode","base","process","env","BASE_URL"],"sources":["D:/pro/Transportation/vue/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport store from \"../store/store\";\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path: '/login',\n    name: 'Login',\n    component: () => import('../views/Login.vue')\n  },\n  {\n    path: '/register',\n    name: 'Register',\n    component: () => import('../views/Register.vue')\n  },\n  {\n    path: '/404',\n    name: '404',\n    component: () => import('../views/404.vue')\n  },\n  {\n    path: '/front',\n    name: 'Front',\n    component: () => import('../views/front/Front'),\n    children: [\n      {\n        path: 'home',\n        name: 'FrontHome',\n        component: () => import('../views/front/Home.vue')\n      },\n      {\n        path: 'createorder',\n        name: 'Createorder',\n        component: () => import('../views/front/Createorder.vue')\n      },\n      {\n        path: 'Searchorder',\n        name: 'Searchorder',\n        component: () => import('../views/front/Searchorder.vue')\n      },\n      {\n        path: 'person',\n        name: 'FrontPerson',\n        component: () => import('../views/front/Person')\n      },\n      {\n        path: 'password',\n        name: 'FrontPassword',\n        component: () => import('../views/front/Password')\n      },\n    ]\n  },\n]\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n\n// // 提供一个重置路由的方法\n// export const resetRouter = () => {\n//   router.matcher = new VueRouter({\n//     mode: 'history',\n//     base: process.env.BASE_URL,\n//     routes\n//   })\n// }\n//\n// // 注意：刷新页面会导致页面路由重置\n// export const setRoutes = () => {\n//   const storeMenus = localStorage.getItem(\"menus\");\n//   if (storeMenus) {\n//\n//     // 获取当前的路由对象名称数组\n//     const currentRouteNames = router.getRoutes().map(v => v.name)\n//     if (!currentRouteNames.includes('Manage')) {\n//       // 拼装动态路由\n//       const manageRoute = { path: '/', name: 'Manage', component: () => import('../views/Manage.vue'), redirect: \"/Dashbord\", children: [\n//           { path: 'person', name: '个人信息', component: () => import('../views/Person.vue')},\n//           { path: 'password', name: '修改密码', component: () => import('../views/Password.vue')}\n//         ] }\n//       const menus = JSON.parse(storeMenus)\n//       menus.forEach(item => {\n//         if (item.path) {  // 当且仅当path不为空的时候才去设置路由\n//           let itemMenu = { path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue')}\n//           manageRoute.children.push(itemMenu)\n//         } else if(item.children.length) {\n//           item.children.forEach(item => {\n//             if (item.path) {\n//               let itemMenu = { path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue')}\n//               manageRoute.children.push(itemMenu)\n//             }\n//           })\n//         }\n//       })\n//       // 动态添加到现在的路由对象中去\n//       console.log(manageRoute)\n//       router.addRoute(manageRoute)\n//     }\n//   }\n// }\n//\n// // 重置我就再set一次路由\n// setRoutes()\n//\n//\n// router.beforeEach((to, from, next) => {\n//   localStorage.setItem(\"currentPathName\", to.name)  // 设置当前的路由名称\n//   store.commit(\"setPath\")\n//\n//   // 未找到路由的情况\n//   if (!to.matched.length) {\n//     const storeMenus = localStorage.getItem(\"menus\")\n//     if (storeMenus) {\n//       next(\"/404\")\n//     } else {\n//       // 跳回登录页面\n//       next(\"/login\")\n//     }\n//   }\n//   // 其他的情况都放行\n//   next()\n//\n// })\n\nexport default router\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,gBAAgB;AAElCF,GAAG,CAACG,GAAG,CAACF,SAAS,CAAC;AAElB,MAAMG,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,oBAAoB;AAC9C,CAAC,EACD;EACEF,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,uBAAuB;AACjD,CAAC,EACD;EACEF,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,KAAK;EACXC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,kBAAkB;AAC5C,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,sBAAsB,CAAC;EAC/CC,QAAQ,EAAE,CACR;IACEH,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,WAAW;IACjBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,yBAAyB;EACnD,CAAC,EACD;IACEF,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE,aAAa;IACnBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,gCAAgC;EAC1D,CAAC,EACD;IACEF,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE,aAAa;IACnBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,gCAAgC;EAC1D,CAAC,EACD;IACEF,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,aAAa;IACnBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,uBAAuB;EACjD,CAAC,EACD;IACEF,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,eAAe;IACrBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,yBAAyB;EACnD,CAAC;AAEL,CAAC,CACF;AAED,MAAME,MAAM,GAAG,IAAIR,SAAS,CAAC;EAC3BS,IAAI,EAAE,SAAS;EACfC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAC1BV;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeK,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}