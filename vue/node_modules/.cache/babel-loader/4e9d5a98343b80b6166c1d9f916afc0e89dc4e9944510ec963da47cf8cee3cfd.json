{"ast":null,"code":"import 'video.js/dist/video-js.css';\nimport { videoPlayer } from 'vue-video-player';\nexport default {\n  name: \"VideoDetail\",\n  components: {\n    videoPlayer\n  },\n  data() {\n    return {\n      // id: this.$route.query.id,\n      // video: {},\n      playerOptions: {\n        playbackRates: [0.5, 1.0, 1.5, 2.0],\n        // 可选的播放速度\n        autoplay: true,\n        // 如果为true,浏览器准备好时开始回放。\n        muted: false,\n        // 默认情况下将会消除任何音频。\n        loop: false,\n        // 是否视频一结束就重新开始。\n        preload: 'auto',\n        // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\n        language: 'zh-CN',\n        aspectRatio: '16:9',\n        // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\n        fluid: true,\n        // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\n        sources: [{\n          type: \"video/mp4\",\n          // 类型\n          src: '' // url地址\n        }],\n\n        poster: '',\n        // 封面地址\n        notSupportedMessage: '此视频暂无法播放，请稍后再试',\n        // 允许覆盖Video.js无法播放媒体源时显示的默认信息。\n        controlBar: {\n          timeDivider: true,\n          // 当前时间和持续时间的分隔符\n          durationDisplay: true,\n          // 显示持续时间\n          remainingTimeDisplay: true,\n          // 是否显示剩余时间功能\n          fullscreenToggle: true // 是否显示全屏按钮\n        }\n      }\n    };\n  },\n\n  created() {\n    let id = this.$route.query.id;\n    this.request(\"/file/detail/\" + id).then(res => {\n      console.log(res.data);\n      // this.video = res.data\n      this.playerOptions.sources[0].src = res.data.url;\n      this.playerOptions.sources[0].src = \"http://vjs.zencdn.net/v/oceans.mp4\";\n    });\n  },\n  methods: {}\n};","map":{"version":3,"names":["videoPlayer","name","components","data","playerOptions","playbackRates","autoplay","muted","loop","preload","language","aspectRatio","fluid","sources","type","src","poster","notSupportedMessage","controlBar","timeDivider","durationDisplay","remainingTimeDisplay","fullscreenToggle","created","id","$route","query","request","then","res","console","log","url","methods"],"sources":["../../springboot/vue/src/views/front/VideoDetail.vue"],"sourcesContent":["<template>\n  <div>\n    <div class='demo'>\n      <video-player class=\"video-player-box\"\n                    ref=\"videoPlayer\"\n                    :playsinline=\"true\"\n                    :options=\"playerOptions\">\n      </video-player>\n    </div>\n  </div>\n</template>\n\n<script>\nimport 'video.js/dist/video-js.css'\nimport { videoPlayer } from 'vue-video-player'\n\nexport default {\n  name: \"VideoDetail\",\n  components: {\n    videoPlayer\n  },\n  data() {\n    return {\n      // id: this.$route.query.id,\n      // video: {},\n      playerOptions: {\n        playbackRates: [0.5, 1.0, 1.5, 2.0], // 可选的播放速度\n        autoplay: true, // 如果为true,浏览器准备好时开始回放。\n        muted: false, // 默认情况下将会消除任何音频。\n        loop: false, // 是否视频一结束就重新开始。\n        preload: 'auto', // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\n        language: 'zh-CN',\n        aspectRatio: '16:9', // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\n        fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\n        sources: [{\n          type: \"video/mp4\", // 类型\n          src: '' // url地址\n        }],\n        poster: '', // 封面地址\n        notSupportedMessage: '此视频暂无法播放，请稍后再试', // 允许覆盖Video.js无法播放媒体源时显示的默认信息。\n        controlBar: {\n          timeDivider: true, // 当前时间和持续时间的分隔符\n          durationDisplay: true, // 显示持续时间\n          remainingTimeDisplay: true, // 是否显示剩余时间功能\n          fullscreenToggle: true // 是否显示全屏按钮\n        }\n      }\n    }\n  },\n  created() {\n    let id =  this.$route.query.id\n    this.request(\"/file/detail/\" + id).then(res => {\n      console.log(res.data)\n      // this.video = res.data\n      this.playerOptions.sources[0].src = res.data.url\n      this.playerOptions.sources[0].src = \"http://vjs.zencdn.net/v/oceans.mp4\"\n    })\n  },\n  methods: {}\n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":"AAaA;AACA,SAAAA,WAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACA;MACA;MACAC,aAAA;QACAC,aAAA;QAAA;QACAC,QAAA;QAAA;QACAC,KAAA;QAAA;QACAC,IAAA;QAAA;QACAC,OAAA;QAAA;QACAC,QAAA;QACAC,WAAA;QAAA;QACAC,KAAA;QAAA;QACAC,OAAA;UACAC,IAAA;UAAA;UACAC,GAAA;QACA;;QACAC,MAAA;QAAA;QACAC,mBAAA;QAAA;QACAC,UAAA;UACAC,WAAA;UAAA;UACAC,eAAA;UAAA;UACAC,oBAAA;UAAA;UACAC,gBAAA;QACA;MACA;IACA;EACA;;EACAC,QAAA;IACA,IAAAC,EAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAF,EAAA;IACA,KAAAG,OAAA,mBAAAH,EAAA,EAAAI,IAAA,CAAAC,GAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA,CAAA1B,IAAA;MACA;MACA,KAAAC,aAAA,CAAAS,OAAA,IAAAE,GAAA,GAAAc,GAAA,CAAA1B,IAAA,CAAA6B,GAAA;MACA,KAAA5B,aAAA,CAAAS,OAAA,IAAAE,GAAA;IACA;EACA;EACAkB,OAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}