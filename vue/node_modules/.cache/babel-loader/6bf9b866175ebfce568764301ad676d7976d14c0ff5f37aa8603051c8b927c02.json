{"ast":null,"code":"import { serverIp } from \"../../../public/config\";\nexport default {\n  name: \"Person\",\n  data() {\n    var validateOthers = (rule, value, callback) => {\n      if (this.isValidString(value) == false) {\n        // this.$refs.ruleForm.validateField('checkPass');\n        callback(new Error('цифры, английский, русский языки и @.*/-+_'));\n      } else {\n        callback();\n      }\n    };\n    var validateNickname = (rule, value, callback) => {\n      if (this.isValidStringNickname(value) == false) {\n        // this.$refs.ruleForm.validateField('checkPass');\n        callback(new Error('цифры, английский и русский языки'));\n      } else {\n        callback();\n      }\n    };\n    var validatePhone = (rule, value, callback) => {\n      if (this.isValidStringPhone(value) == false) {\n        // this.$refs.ruleForm.validateField('checkPass');\n        callback(new Error('Example：89692184441'));\n      } else {\n        callback();\n      }\n    };\n    var validateAddress = (rule, value, callback) => {\n      if (this.isValidStringAddress(value) == false) {\n        // this.$refs.ruleForm.validateField('checkPass');\n        callback(new Error('Example：89692184441'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      serverIp: serverIp,\n      pass: '',\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      ruleForm: {},\n      rules: {\n        username: [{\n          required: true,\n          message: 'имя пользователя',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 50,\n          message: 'Длина от 5 до 50 символов',\n          trigger: 'blur'\n        }, {\n          validator: validateOthers,\n          trigger: 'blur'\n        }],\n        nickname: [{\n          required: true,\n          message: 'псевдоним',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 50,\n          message: 'Длина от 5 до 50 символов',\n          trigger: 'blur'\n        }, {\n          validator: validateNickname,\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: 'адрес электронной почты example.com',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 50,\n          message: 'Длина от 5 до 50 символов',\n          trigger: 'blur'\n        }, {\n          validator: validateOthers,\n          trigger: 'blur'\n        }],\n        phone: [{\n          required: true,\n          message: 'номер телефона',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 30,\n          message: 'Длина от 5 до 30 символов',\n          trigger: 'blur'\n        }, {\n          validator: validatePhone,\n          trigger: 'blur'\n        }],\n        address: [{\n          required: false,\n          message: '',\n          trigger: 'blur'\n        }, {\n          min: 0,\n          max: 200,\n          message: 'Длина от 0 до 200 символов',\n          trigger: 'blur'\n        }, {\n          validator: validateAddress,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    this.getUser().then(res => {\n      this.ruleForm = res;\n    });\n  },\n  methods: {\n    async getUser() {\n      return (await this.request.get(\"/user/username/\" + this.user.username)).data;\n    },\n    save() {\n      this.$refs['ruleForm'].validate(valid => {\n        if (valid) {\n          console.log(this.ruleForm);\n          // this.request.post(\"/user/saveByUser\", ruleForm).then(res => {\n          //     if (res.code === '200') {\n          //         this.$message.success(\"Сохранено успешно\")\n          //\n          //         // 触发父级更新User的方法\n          //         this.$emit(\"refreshUser\")\n          //\n          //         // 更新浏览器存储的用户信息\n          //         this.getUser().then(res => {\n          //             res.token = JSON.parse(localStorage.getItem(\"user\")).token\n          //             localStorage.setItem(\"user\", JSON.stringify(res))\n          //         })\n          //\n          //     } else {\n          //         this.$message.error(\"Не удалось сохранить\")\n          //     }\n          // })\n        } else {\n          this.$message.error(\"Не удалось сохранить\");\n          return false;\n        }\n      });\n    },\n    handleAvatarSuccess(res) {\n      this.form.avatarUrl = res;\n    },\n    isValidString(str) {\n      try {\n        //英文字母数字俄语字母/*-+.@_\n        const pattern = /^[0-9a-zA-Z\\u4e00-\\u9fa5\\u0400-\\u04FF*@.\\/\\-+_]+$/;\n        return pattern.test(str);\n      } catch (e) {\n        return null;\n      }\n    },\n    isValidStringPhone(str) {\n      try {\n        const pattern = /^[0-9]+$/;\n        return pattern.test(str);\n      } catch (e) {\n        return null;\n      }\n    },\n    isValidStringNickname(str) {\n      try {\n        const pattern = /^[0-9a-zA-Z\\u4e00-\\u9fa5\\u0400-\\u04FF]+$/.test(str);\n        return pattern;\n      } catch (e) {\n        return null;\n      }\n    },\n    isValidStringAddress(str) {\n      try {\n        const pattern = /^[0-9a-zA-Z\\u4e00-\\u9fa5\\u0400-\\u04FF*@.\\/\\-+_,]+$/.test(str);\n        return pattern;\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["serverIp","name","data","validateOthers","rule","value","callback","isValidString","Error","validateNickname","isValidStringNickname","validatePhone","isValidStringPhone","validateAddress","isValidStringAddress","pass","user","localStorage","getItem","JSON","parse","ruleForm","rules","username","required","message","trigger","min","max","validator","nickname","email","phone","address","created","getUser","then","res","methods","request","get","save","$refs","validate","valid","console","log","$message","error","handleAvatarSuccess","form","avatarUrl","str","pattern","test","e"],"sources":["src/views/front/Person.vue"],"sourcesContent":["<template>\r\n    <div style=\"position: relative; right: -25%;top: 10%; width: 60%\">\r\n    <el-card style=\"width: 500px;\">\r\n        <el-form :model=\"ruleForm\" status-icon :rules=\"rules\" ref=\"ruleForm\" label-width=\"80px\">\r\n            <el-form-item :label=\"$t('username')\" prop=\"username\">\r\n                <el-input v-model=\"ruleForm.username\" disabled autocomplete=\"off\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item :label=\"$t('nickname')\" prop=\"nickname\">\r\n                <el-input v-model=\"ruleForm.nickname\" autocomplete=\"off\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item :label=\"$t('email')\" prop=\"email\">\r\n                <el-input v-model=\"ruleForm.email\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item :label=\"$t('phone')\" prop=\"phone\">\r\n                <el-input v-model=\"ruleForm.phone\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item :label=\"$t('address')\" prop=\"address\">\r\n                <el-input v-model=\"ruleForm.address\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <el-button v-no-more-click type=\"primary\" @click=\"save('ruleForm')\">{{$t('confirm')}}</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n<!--        <el-form label-width=\"80px\" size=\"small\">-->\r\n<!--            <el-form-item :label=\"$t('username')\">-->\r\n<!--                <el-input v-model=\"form.username\" disabled autocomplete=\"off\"></el-input>-->\r\n<!--            </el-form-item>-->\r\n<!--            <el-form-item :label=\"$t('nickname')\">-->\r\n<!--                <el-input v-model=\"form.nickname\" autocomplete=\"off\"></el-input>-->\r\n<!--            </el-form-item>-->\r\n<!--            <el-form-item :label=\"$t('email')\">-->\r\n<!--                <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>-->\r\n<!--            </el-form-item>-->\r\n<!--            <el-form-item :label=\"$t('phone')\">-->\r\n<!--                <el-input v-model=\"form.phone\" autocomplete=\"off\"></el-input>-->\r\n<!--            </el-form-item>-->\r\n<!--            <el-form-item :label=\"$t('address')\">-->\r\n<!--                <el-input type=\"textarea\" v-model=\"form.address\" autocomplete=\"off\"></el-input>-->\r\n<!--            </el-form-item>-->\r\n<!--            <el-form-item>-->\r\n<!--                <el-button v-no-more-click type=\"primary\" @click=\"save\">{{$t('confirm')}}</el-button>-->\r\n<!--            </el-form-item>-->\r\n<!--        </el-form>-->\r\n    </el-card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {serverIp} from \"../../../public/config\";\r\n\r\nexport default {\r\n    name: \"Person\",\r\n    data() {\r\n        var validateOthers = (rule, value, callback) => {\r\n            if(this.isValidString(value) == false){\r\n                // this.$refs.ruleForm.validateField('checkPass');\r\n                callback(new Error('цифры, английский, русский языки и @.*/-+_'));\r\n            } else {\r\n                callback();\r\n            }\r\n        };\r\n        var validateNickname = (rule, value, callback) => {\r\n            if(this.isValidStringNickname(value) == false){\r\n                // this.$refs.ruleForm.validateField('checkPass');\r\n                callback(new Error('цифры, английский и русский языки'));\r\n            } else {\r\n                callback();\r\n            }\r\n        };\r\n        var validatePhone = (rule, value, callback) => {\r\n            if(this.isValidStringPhone(value) == false){\r\n                // this.$refs.ruleForm.validateField('checkPass');\r\n                callback(new Error('Example：89692184441'));\r\n            } else {\r\n                callback();\r\n            }\r\n        };\r\n        var validateAddress = (rule, value, callback) => {\r\n            if(this.isValidStringAddress(value) == false){\r\n                // this.$refs.ruleForm.validateField('checkPass');\r\n                callback(new Error('Example：89692184441'));\r\n            } else {\r\n                callback();\r\n            }\r\n        };\r\n        return {\r\n            serverIp: serverIp,\r\n            pass: '',\r\n            user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\r\n            ruleForm: {},\r\n            rules:{\r\n                username: [\r\n                    { required: true, message: 'имя пользователя', trigger: 'blur' },\r\n                    { min: 5, max: 50, message: 'Длина от 5 до 50 символов', trigger: 'blur' },\r\n                    { validator: validateOthers,  trigger: 'blur'}\r\n                ],\r\n                nickname: [\r\n                    { required: true, message: 'псевдоним', trigger: 'blur' },\r\n                    { min: 1, max: 50, message: 'Длина от 5 до 50 символов', trigger: 'blur' },\r\n                    { validator: validateNickname,  trigger: 'blur'}\r\n                ],\r\n                email: [\r\n                    { required: true, message: 'адрес электронной почты example.com', trigger: 'blur' },\r\n                    { min: 5, max: 50, message: 'Длина от 5 до 50 символов', trigger: 'blur' },\r\n                    { validator: validateOthers,  trigger: 'blur'}\r\n                ],\r\n                phone: [\r\n                    { required: true, message: 'номер телефона', trigger: 'blur' },\r\n                    { min: 5, max: 30, message: 'Длина от 5 до 30 символов', trigger: 'blur' },\r\n                    { validator: validatePhone,  trigger: 'blur'}\r\n                ],\r\n                address: [\r\n                    { required: false, message: '', trigger: 'blur' },\r\n                    { min: 0, max: 200, message: 'Длина от 0 до 200 символов', trigger: 'blur' },\r\n                    { validator: validateAddress,  trigger: 'blur'}\r\n                ],\r\n            },\r\n        }\r\n    },\r\n    created() {\r\n        this.getUser().then(res => {\r\n            this.ruleForm = res\r\n        })\r\n    },\r\n    methods: {\r\n        async getUser() {\r\n            return (await this.request.get(\"/user/username/\" + this.user.username)).data\r\n        },\r\n        save() {\r\n            this.$refs['ruleForm'].validate((valid) => {\r\n                if (valid) {\r\n                    console.log(this.ruleForm)\r\n                    // this.request.post(\"/user/saveByUser\", ruleForm).then(res => {\r\n                    //     if (res.code === '200') {\r\n                    //         this.$message.success(\"Сохранено успешно\")\r\n                    //\r\n                    //         // 触发父级更新User的方法\r\n                    //         this.$emit(\"refreshUser\")\r\n                    //\r\n                    //         // 更新浏览器存储的用户信息\r\n                    //         this.getUser().then(res => {\r\n                    //             res.token = JSON.parse(localStorage.getItem(\"user\")).token\r\n                    //             localStorage.setItem(\"user\", JSON.stringify(res))\r\n                    //         })\r\n                    //\r\n                    //     } else {\r\n                    //         this.$message.error(\"Не удалось сохранить\")\r\n                    //     }\r\n                    // })\r\n                } else {\r\n                    this.$message.error(\"Не удалось сохранить\")\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        handleAvatarSuccess(res) {\r\n            this.form.avatarUrl = res\r\n        },\r\n        isValidString(str) {\r\n            try {\r\n                //英文字母数字俄语字母/*-+.@_\r\n                const pattern = /^[0-9a-zA-Z\\u4e00-\\u9fa5\\u0400-\\u04FF*@.\\/\\-+_]+$/;\r\n                return pattern.test(str);\r\n            } catch (e){\r\n                return null\r\n            }\r\n        },\r\n        isValidStringPhone(str) {\r\n            try {\r\n                const pattern = /^[0-9]+$/;\r\n                return pattern.test(str);\r\n            } catch (e){\r\n                return null\r\n            }\r\n        },\r\n        isValidStringNickname(str) {\r\n            try {\r\n                const pattern = /^[0-9a-zA-Z\\u4e00-\\u9fa5\\u0400-\\u04FF]+$/.test(str);\r\n                return pattern;\r\n            } catch (e){\r\n                return null\r\n            }\r\n        },\r\n        isValidStringAddress(str) {\r\n            try {\r\n                const pattern = /^[0-9a-zA-Z\\u4e00-\\u9fa5\\u0400-\\u04FF*@.\\/\\-+_,]+$/.test(str);\r\n                return pattern;\r\n            } catch (e){\r\n                return null\r\n            }\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.avatar-uploader {\r\n    text-align: center;\r\n    padding-bottom: 10px;\r\n}\r\n.avatar-uploader .el-upload {\r\n    border: 1px dashed #d9d9d9;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n.avatar-uploader .el-upload:hover {\r\n    border-color: #409EFF;\r\n}\r\n.avatar-uploader-icon {\r\n    font-size: 28px;\r\n    color: #8c939d;\r\n    width: 138px;\r\n    height: 138px;\r\n    line-height: 138px;\r\n    text-align: center;\r\n}\r\n.avatar {\r\n    width: 138px;\r\n    height: 138px;\r\n    display: block;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}